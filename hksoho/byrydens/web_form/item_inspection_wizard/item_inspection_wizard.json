{
 "allow_comments": 0,
 "allow_delete": 0,
 "allow_edit": 1,
 "allow_incomplete": 0,
 "allow_multiple": 1,
 "allow_print": 0,
 "anonymous": 0,
 "apply_document_permissions": 0,
 "button_label": "Save",
 "client_script": "frappe.web_form.after_load = () => {\r\n    console.log('Web Form loaded at', new Date().toLocaleString());\r\n    console.log('fields_dict keys:', Object.keys(frappe.web_form.fields_dict));\r\n    console.log('Current user:', frappe.session.user);\r\n    console.log('Web Form doc:', frappe.web_form.doc);\r\n\r\n    // \u6aa2\u67e5\u5fc5\u8981\u5b57\u6bb5\r\n    const required_fields = ['supplier', 'supplier_select', 'purchase_order', 'purchase_order_line', 'line_select', 'inspector', 'inspection_date', 'order_number', 'line_number', 'article_number', 'article_name', 'number_of_inspection', 'inspection_results', 'inspection_results_construction', 'inspection_results_product', 'inspection_results_shade', 'template', 'need_reinspection'];\r\n    required_fields.forEach(field => {\r\n        if (!frappe.web_form.fields_dict[field]) {\r\n            console.error(`Field ${field} is missing`);\r\n            frappe.msgprint(`\u932f\u8aa4\uff1a\u5b57\u6bb5 ${field} \u7f3a\u5931\uff0c\u8acb\u6aa2\u67e5 Web Form \u914d\u7f6e\u3002`);\r\n        } else {\r\n            console.log(`Field ${field} exists`);\r\n        }\r\n    });\r\n\r\n    // \u521d\u59cb\u5316 supplier Link \u6b04\u4f4d\u9078\u9805\r\n    if (frappe.web_form.fields_dict['supplier']) {\r\n        frappe.web_form.fields_dict['supplier'].get_query = function() {\r\n            return { filters: {} };\r\n        };\r\n        frappe.web_form.fields_dict['supplier'].refresh();\r\n        setTimeout(() => {\r\n            frappe.web_form.set_df_property('supplier', 'read_only', 1);\r\n            frappe.web_form.fields_dict['supplier'].refresh();\r\n        }, 500);\r\n        console.log('Supplier field initialized as read-only with delay');\r\n    }\r\n\r\n    // \u8a2d\u7f6e\u8868\u683c\u7684\u5206\u9801\u9650\u5236\r\n    const table_fields = ['inspection_results', 'inspection_results_construction', 'inspection_results_product', 'inspection_results_shade'];\r\n    table_fields.forEach(field => {\r\n        if (frappe.web_form.fields_dict[field]) {\r\n            frappe.web_form.fields_dict[field].grid.limit_page_length = 100;\r\n            frappe.web_form.fields_dict[field].grid.refresh();\r\n            console.log(`Set ${field} grid limit_page_length to 100`);\r\n        }\r\n    });\r\n\r\n    // \u52d5\u614b\u904e\u6ffe supplier_select\r\n    if (frappe.web_form.fields_dict['supplier_select']) {\r\n        frappe.call({\r\n            method: 'frappe.client.get_list',\r\n            args: { doctype: 'Purchase Order', fields: ['distinct supplier'], limit_page_length: 0 },\r\n            callback: function(r) {\r\n                console.log('Purchase Order suppliers response:', r);\r\n                if (r.message && r.message.length > 0) {\r\n                    const suppliers = r.message.map(row => row.supplier).filter(s => s);\r\n                    if (suppliers.length > 0) {\r\n                        frappe.call({\r\n                            method: 'frappe.client.get_list',\r\n                            args: { doctype: 'Partner', filters: { name: ['in', suppliers] }, fields: ['name', 'partner_name'], limit_page_length: 0 },\r\n                            callback: function(res) {\r\n                                console.log('Partner response:', res);\r\n                                if (res.message && res.message.length > 0) {\r\n                                    const supplier_options = res.message.map(sup => `${sup.name} - ${sup.partner_name || '\u7121\u540d\u7a31'}`);\r\n                                    frappe.web_form.set_df_property('supplier_select', 'options', supplier_options.join('\\n'));\r\n                                    setTimeout(() => { frappe.web_form.fields_dict['supplier_select'].refresh(); }, 500);\r\n                                    console.log('Supplier select options set:', supplier_options);\r\n                                } else {\r\n                                    frappe.web_form.set_df_property('supplier_select', 'options', '');\r\n                                    frappe.web_form.fields_dict['supplier_select'].refresh();\r\n                                    frappe.msgprint('\u672a\u627e\u5230\u5c0d\u61c9 Partner \u7684\u4f9b\u61c9\u5546\uff0c\u8acb\u6aa2\u67e5\u8cc7\u6599');\r\n                                    console.log('No matching Partners found');\r\n                                }\r\n                            }\r\n                        });\r\n                    } else {\r\n                        frappe.web_form.set_df_property('supplier_select', 'options', '');\r\n                        frappe.web_form.fields_dict['supplier_select'].refresh();\r\n                        frappe.msgprint('\u672a\u627e\u5230\u6709 PO \u7684\u4f9b\u61c9\u5546\uff0c\u8acb\u65b0\u589e Purchase Order \u6e2c\u8a66\u8cc7\u6599');\r\n                        console.log('No suppliers from Purchase Orders');\r\n                    }\r\n                } else {\r\n                    frappe.web_form.set_df_property('supplier_select', 'options', '');\r\n                    frappe.web_form.fields_dict['supplier_select'].refresh();\r\n                    frappe.msgprint('\u672a\u627e\u5230\u6709 PO \u7684\u4f9b\u61c9\u5546\uff0c\u8acb\u65b0\u589e Purchase Order \u6e2c\u8a66\u8cc7\u6599');\r\n                    console.log('No Purchase Orders found');\r\n                }\r\n            }\r\n        });\r\n\r\n        const current_supplier = frappe.web_form.get_value('supplier');\r\n        if (current_supplier) {\r\n            frappe.call({\r\n                method: 'frappe.client.get_value',\r\n                args: { doctype: 'Partner', fieldname: 'partner_name', filters: { name: current_supplier } },\r\n                callback: function(resp) {\r\n                    console.log('Pre-set Partner response:', resp);\r\n                    const partner_name = resp.message ? resp.message.partner_name : '\u7121\u540d\u7a31';\r\n                    frappe.web_form.set_value('supplier_select', `${current_supplier} - ${partner_name}`);\r\n                    console.log('Supplier select pre-set to:', `${current_supplier} - ${partner_name}`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // \u76e3\u807d supplier_select \u8b8a\u5316\r\n    if (frappe.web_form.fields_dict['supplier_select'] && frappe.web_form.fields_dict['purchase_order']) {\r\n        frappe.web_form.fields_dict['purchase_order'].set_data([]);\r\n        frappe.web_form.fields_dict['supplier_select'].$input.on('change', function() {\r\n            const supplier_select_value = frappe.web_form.get_value('supplier_select');\r\n            const supplier_id = supplier_select_value ? supplier_select_value.split(' - ')[0] : '';\r\n            frappe.web_form.set_value('supplier', supplier_id).then(() => {\r\n                console.log('Supplier ID set successfully:', supplier_id);\r\n                frappe.web_form.fields_dict['supplier'].refresh();\r\n            }).catch(err => console.error('Error setting supplier:', err));\r\n\r\n            if (supplier_id) {\r\n                frappe.call({\r\n                    method: 'frappe.client.get_list',\r\n                    args: { doctype: 'Purchase Order', filters: { supplier: supplier_id }, fields: ['name'], limit_page_length: 100 },\r\n                    callback: function(r) {\r\n                        if (r.message && r.message.length > 0) {\r\n                            const po_options = r.message.map(po => po.name);\r\n                            frappe.web_form.fields_dict['purchase_order'].set_data(po_options);\r\n                            console.log('Purchase Order options set:', po_options);\r\n                        } else {\r\n                            frappe.web_form.fields_dict['purchase_order'].set_data([]);\r\n                            frappe.msgprint(`\u672a\u627e\u5230\u8207\u4f9b\u61c9\u5546 ${supplier_select_value} \u76f8\u95dc\u7684\u63a1\u8cfc\u8a02\u55ae`);\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                frappe.web_form.fields_dict['purchase_order'].set_data([]);\r\n                console.log('Supplier select cleared, Purchase Order options reset');\r\n            }\r\n            frappe.web_form.fields_dict['purchase_order'].refresh();\r\n        });\r\n    }\r\n\r\n    // \u76e3\u807d purchase_order \u8b8a\u5316\r\n    if (frappe.web_form.fields_dict['purchase_order'] && frappe.web_form.fields_dict['line_select']) {\r\n        frappe.web_form.set_df_property('line_select', 'options', '');\r\n        frappe.web_form.fields_dict['line_select'].refresh();\r\n        frappe.web_form.fields_dict['purchase_order'].$input.on('change', function() {\r\n            const po_name = frappe.web_form.get_value('purchase_order');\r\n            console.log('Purchase Order selected:', po_name);\r\n            if (po_name) {\r\n                frappe.call({\r\n                    method: 'frappe.client.get_list',\r\n                    args: { doctype: 'Purchase Order Item', filters: { purchase_order: po_name }, fields: ['line', 'article_number', 'confirmed_qty', 'name'], order_by: 'line asc', limit_page_length: 0 },\r\n                    callback: function(r) {\r\n                        if (r.message && r.message.length > 0) {\r\n                            const items = r.message;\r\n                            const article_numbers = items.map(item => item.article_number || '');\r\n                            frappe.call({\r\n                                method: 'frappe.client.get_list',\r\n                                args: { doctype: 'Product', filters: { article_number: ['in', article_numbers] }, fields: ['article_number', 'article_name'], limit_page_length: 0 },\r\n                                callback: function(res) {\r\n                                    const product_map = {};\r\n                                    if (res.message) res.message.forEach(prod => product_map[prod.article_number] = prod.article_name || '');\r\n                                    const line_options = items.map(item => `${item.line || ''} - ${item.article_number || ''} - ${product_map[item.article_number] || ''} - ${item.confirmed_qty || 0}`);\r\n                                    frappe.web_form.set_df_property('line_select', 'options', line_options.join('\\n'));\r\n                                    frappe.web_form.fields_dict['line_select'].refresh();\r\n                                    console.log('Line select options set:', line_options);\r\n                                }\r\n                            });\r\n                        } else {\r\n                            frappe.web_form.set_df_property('line_select', 'options', '');\r\n                            frappe.web_form.fields_dict['line_select'].refresh();\r\n                            frappe.msgprint(`\u672a\u627e\u5230\u63a1\u8cfc\u8a02\u55ae ${po_name} \u7684\u9805\u76ee`);\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                frappe.web_form.set_df_property('line_select', 'options', '');\r\n                frappe.web_form.fields_dict['line_select'].refresh();\r\n                console.log('Purchase Order cleared, Line select options reset');\r\n            }\r\n        });\r\n    }\r\n\r\n    // \u76e3\u807d line_select \u8b8a\u5316\r\n    if (frappe.web_form.fields_dict['line_select']) {\r\n        frappe.web_form.fields_dict['line_select'].$input.on('change', function() {\r\n            const line_value = frappe.web_form.get_value('line_select');\r\n            const po_name = frappe.web_form.get_value('purchase_order');\r\n            console.log('Line select selected:', line_value);\r\n            if (line_value && po_name) {\r\n                const line_parts = line_value.split(' - ');\r\n                const line = line_parts[0] || '';\r\n                const article_number = line_parts[1] || '';\r\n                const article_name = line_parts[2] || '';\r\n                const order_qty = line_parts[3] || 0;\r\n\r\n                frappe.call({\r\n                    method: 'frappe.client.get_list',\r\n                    args: { doctype: 'Purchase Order Item', filters: { purchase_order: po_name, line: line }, fields: ['name'], limit_page_length: 1 },\r\n                    callback: function(r) {\r\n                        if (r.message && r.message.length > 0) {\r\n                            const item_name = r.message[0].name;\r\n                            frappe.web_form.set_value('purchase_order_line', item_name);\r\n                            console.log('Purchase Order Line set to:', item_name);\r\n                        } else {\r\n                            frappe.msgprint('\u672a\u627e\u5230\u5c0d\u61c9\u7684 Purchase Order Item');\r\n                        }\r\n                    }\r\n                });\r\n\r\n                frappe.web_form.set_value('inspector', frappe.session.user);\r\n                frappe.web_form.fields_dict['inspector'].df.read_only = 1;\r\n                frappe.web_form.fields_dict['inspector'].refresh();\r\n                console.log('Inspector set to:', frappe.session.user);\r\n\r\n                const today = new Date().toISOString().split('T')[0];\r\n                frappe.web_form.set_value('inspection_date', today);\r\n                frappe.web_form.fields_dict['inspection_date'].df.read_only = 1;\r\n                frappe.web_form.fields_dict['inspection_date'].refresh();\r\n                console.log('Inspection Date set to:', today);\r\n\r\n                frappe.web_form.set_value('order_number', po_name);\r\n                frappe.web_form.fields_dict['order_number'].df.read_only = 1;\r\n                frappe.web_form.fields_dict['order_number'].refresh();\r\n                console.log('Order Number set to:', po_name);\r\n\r\n                frappe.web_form.set_value('line_number', line);\r\n                frappe.web_form.fields_dict['line_number'].df.read_only = 1;\r\n                frappe.web_form.fields_dict['line_number'].refresh();\r\n                console.log('Line Number set to:', line);\r\n\r\n                frappe.web_form.set_value('article_number', article_number);\r\n                console.log('Article Number set to:', article_number);\r\n\r\n                if (article_number) {\r\n                    frappe.call({\r\n                        method: 'frappe.client.get_value',\r\n                        args: { doctype: 'Product', fieldname: 'article_name', filters: { article_number: article_number } },\r\n                        callback: function(res) {\r\n                            const article_name_from_product = res.message ? res.message.article_name : '';\r\n                            frappe.web_form.set_value('article_name', article_name_from_product);\r\n                            console.log('Article Name set to:', article_name_from_product);\r\n                        }\r\n                    });\r\n                } else {\r\n                    frappe.web_form.set_value('article_name', '');\r\n                }\r\n\r\n                if (po_name && line) {\r\n                    frappe.call({\r\n                        method: 'frappe.client.get_list',\r\n                        args: { doctype: 'Inspection', filters: { purchase_order: po_name, purchase_order_line: line }, limit_page_length: 0 },\r\n                        callback: function(res) {\r\n                            const count = res.message ? res.message.length : 0;\r\n                            frappe.web_form.set_value('number_of_inspection', count + 1);\r\n                            console.log('Number of Inspection set to:', count + 1);\r\n                        }\r\n                    });\r\n                } else {\r\n                    frappe.web_form.set_value('number_of_inspection', 1);\r\n                }\r\n            } else {\r\n                frappe.web_form.set_value('inspector', '');\r\n                frappe.web_form.set_value('inspection_date', '');\r\n                frappe.web_form.set_value('order_number', '');\r\n                frappe.web_form.set_value('line_number', '');\r\n                frappe.web_form.set_value('article_number', '');\r\n                frappe.web_form.set_value('article_name', '');\r\n                frappe.web_form.set_value('number_of_inspection', 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    // \u8a2d\u7f6e\u9810\u8a2d\u6a21\u677f\r\n    if (frappe.web_form.fields_dict['template']) {\r\n        frappe.web_form.set_value('template', 'Default Template');\r\n        console.log('Template set to Default Template');\r\n    }\r\n\r\n    // \u6aa2\u67e5 inspection_results \u76f8\u95dc\u8868\u683c\r\n    let inspection_items = [];\r\n    const table_configs = {\r\n        'inspection_results': { category: 'Carton', wrapper_id: 'inspection_results_carton' },\r\n        'inspection_results_construction': { category: 'Construction', wrapper_id: 'inspection_results_construction' },\r\n        'inspection_results_product': { category: 'Product', wrapper_id: 'inspection_results_product' },\r\n        'inspection_results_shade': { category: 'Shade', wrapper_id: 'inspection_results_shade' }\r\n    };\r\n\r\n    Object.keys(table_configs).forEach(table_field => {\r\n        const config = table_configs[table_field];\r\n        if (frappe.web_form.fields_dict[table_field]) {\r\n            const wrapper = frappe.web_form.fields_dict[table_field].wrapper;\r\n            console.log(`${table_field} wrapper:`, wrapper);\r\n            if (!wrapper) {\r\n                console.error(`${table_field} wrapper is undefined`);\r\n                frappe.msgprint(`\u932f\u8aa4\uff1a${table_field} wrapper \u672a\u5b9a\u7fa9`);\r\n                return;\r\n            }\r\n\r\n            $(wrapper).empty();\r\n            console.log(`${table_field} wrapper emptied`);\r\n            const table_html = `\r\n                <div id=\"${config.wrapper_id}\" style=\"margin: 20px;\">\r\n                    <h3>${config.category} \u6aa2\u67e5\u7d50\u679c</h3>\r\n                    <table class=\"table table-bordered\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\u9805\u76ee\u7de8\u865f</th>\r\n                                <th>\u63cf\u8ff0</th>\r\n                                <th>\u7d50\u679c</th>\r\n                                <th>\u91cd\u65b0\u6aa2\u67e5</th>\r\n                                <th>\u5099\u8a3b</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody id=\"results_body_${table_field}\"></tbody>\r\n                    </table>\r\n                </div>\r\n            `;\r\n            $(wrapper).html(table_html);\r\n            console.log(`${table_field} Table HTML rendered`);\r\n        }\r\n    });\r\n\r\n    // \u8f09\u5165 API \u6578\u64da\u4e26\u6309 Category \u5206\u8868\u6e32\u67d3\r\n    const template_name = frappe.web_form.get_value('template') || 'Default Template';\r\n    console.log('Fetching items for template:', template_name);\r\n    frappe.call({\r\n        method: 'hksoho.byrydens.inspection_api.get_inspection_items',\r\n        args: { template_name: template_name },\r\n        callback: function(r) {\r\n            console.log('API response:', JSON.stringify(r.message, null, 2));\r\n            console.log('API response length:', r.message ? r.message.length : 0);\r\n            if (r.message && r.message.length > 0) {\r\n                inspection_items = r.message;\r\n                Object.keys(table_configs).forEach(table_field => {\r\n                    const config = table_configs[table_field];\r\n                    const tbody = $(`#results_body_${table_field}`);\r\n                    tbody.empty();\r\n                    const items = inspection_items.filter(item => item.category === config.category);\r\n                    items.forEach((item, index) => {\r\n                        const item_number = item.item_number || (index + 1).toString();\r\n                        tbody.append(`\r\n                            <tr data-item-number=\"${item_number}\" data-description=\"${item.description || ''}\">\r\n                                <td>${item_number}</td>\r\n                                <td>${item.description || ''}</td>\r\n                                <td>\r\n                                    <select class=\"result-select form-control\">\r\n                                        <option value=\"Pass\">Pass</option>\r\n                                        <option value=\"Fail\">Fail</option>\r\n                                        <option value=\"N/A\" selected>N/A</option>\r\n                                    </select>\r\n                                </td>\r\n                                <td><input type=\"checkbox\" class=\"reinspection-check\"></td>\r\n                                <td><input type=\"text\" class=\"notes-input form-control\"></td>\r\n                            </tr>\r\n                        `);\r\n                    });\r\n                    console.log(`Table rows rendered for ${table_field}:`, items.length);\r\n                    console.log(`Inspection items for ${config.category}:`, items);\r\n                });\r\n            } else {\r\n                frappe.msgprint('Inspection Template not found');\r\n                Object.keys(table_configs).forEach(table_field => {\r\n                    $(`#results_body_${table_field}`).empty();\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    // \u5728\u4fdd\u5b58\u524d\u6536\u96c6\u6aa2\u67e5\u7d50\u679c\u6578\u64da\r\n    frappe.web_form.validate = function() {\r\n        const supplier_select_value = frappe.web_form.get_value('supplier_select');\r\n        const supplier_id = supplier_select_value ? supplier_select_value.split(' - ')[0] : '';\r\n        frappe.web_form.set_value('supplier', supplier_id);\r\n        console.log('Supplier corrected to ID:', supplier_id);\r\n\r\n        const line_value = frappe.web_form.get_value('line_select');\r\n        const line = line_value ? line_value.split(' - ')[0] : '';\r\n        console.log('Purchase Order Line corrected to Line:', line);\r\n\r\n        // \u6e05\u7a7a\u6240\u6709\u8868\u683c\r\n        Object.keys(table_configs).forEach(table_field => {\r\n            const grid = frappe.web_form.fields_dict[table_field].grid;\r\n            grid.grid_rows.forEach(row => grid.remove_row(row.idx));\r\n            grid.refresh();\r\n            console.log(`Cleared existing ${table_field} rows`);\r\n        });\r\n\r\n        // \u6309 Category \u6536\u96c6\u6aa2\u67e5\u7d50\u679c\u6578\u64da\u4e26\u9010\u884c\u65b0\u589e\r\n        Object.keys(table_configs).forEach(table_field => {\r\n            const config = table_configs[table_field];\r\n            const grid = frappe.web_form.fields_dict[table_field].grid;\r\n            const items = inspection_items.filter(item => item.category === config.category);\r\n            $(`#results_body_${table_field} .result-select`).each(function(index) {\r\n                if (!items[index]) {\r\n                    console.error(`No inspection item for ${config.category} at index:`, index);\r\n                    return;\r\n                }\r\n                const item = items[index];\r\n                const row = $(this).closest('tr');\r\n                const item_number = item.item_number || (index + 1).toString();\r\n                const description = item.description || '';\r\n                const result = $(this).val() || 'N/A';\r\n                const need_reinspection = row.find('.reinspection-check').is(':checked') ? 1 : 0;\r\n                const notes = row.find('.notes-input').val() || '';\r\n\r\n                grid.add_new_row();\r\n                let new_row = grid.grid_rows[grid.grid_rows.length - 1];\r\n                if (new_row) {\r\n                    new_row.doc.name = `row_${table_field}_${index + 1}`;\r\n                    new_row.doc.item_number = item_number;\r\n                    new_row.doc.description = description;\r\n                    new_row.doc.result = result;\r\n                    new_row.doc.need_reinspection = need_reinspection;\r\n                    new_row.doc.notes = notes;\r\n                    new_row.doc.idx = index + 1;\r\n                    console.log(`Added ${table_field} row:`, new_row.doc);\r\n                } else {\r\n                    console.error(`Failed to add ${table_field} row at index:`, index);\r\n                }\r\n            });\r\n            grid.refresh();\r\n            console.log(`Final ${table_field} data:`, JSON.stringify(frappe.web_form.get_value(table_field), null, 2));\r\n        });\r\n\r\n        // \u6aa2\u67e5\u662f\u5426\u6709\u6578\u64da\r\n        let has_data = false;\r\n        Object.keys(table_configs).forEach(table_field => {\r\n            if (frappe.web_form.get_value(table_field).length > 0) has_data = true;\r\n        });\r\n        if (!has_data) {\r\n            frappe.msgprint({ title: '\u932f\u8aa4', indicator: 'red', message: '\u6c92\u6709\u6aa2\u67e5\u7d50\u679c\u6578\u64da\u53ef\u4fdd\u5b58' });\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    };\r\n};",
 "condition_json": "[]",
 "creation": "2025-07-11 20:40:28.450283",
 "custom_css": "    .web-form-container {\r\n        width: 120%; /* Or specify a pixel value like 800px */\r\n    }",
 "doc_type": "Inspection",
 "docstatus": 0,
 "doctype": "Web Form",
 "idx": 0,
 "is_standard": 1,
 "list_columns": [],
 "list_title": "Item Inspection Wizard",
 "login_required": 1,
 "max_attachment_size": 0,
 "modified": "2025-09-03 16:34:51.164026",
 "modified_by": "Administrator",
 "module": "byrydens",
 "name": "item-inspection-wizard",
 "owner": "Administrator",
 "published": 0,
 "route": "item-inspection-wizard",
 "show_attachments": 0,
 "show_list": 1,
 "show_sidebar": 1,
 "title": "Item Inspection Wizard",
 "web_form_fields": [
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "supplier_select",
   "fieldtype": "Select",
   "hidden": 0,
   "label": "Supplier Select",
   "max_length": 0,
   "max_value": 0,
   "options": "",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "",
   "fieldtype": "Page Break",
   "hidden": 0,
   "label": "",
   "max_length": 0,
   "max_value": 0,
   "options": "",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "depends_on": "",
   "fieldname": "purchase_order",
   "fieldtype": "Link",
   "hidden": 0,
   "label": "Purchase Order",
   "max_length": 0,
   "max_value": 0,
   "options": "Purchase Order",
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "",
   "fieldtype": "Page Break",
   "hidden": 0,
   "label": "",
   "max_length": 0,
   "max_value": 0,
   "options": "",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "line_select",
   "fieldtype": "Select",
   "hidden": 0,
   "label": "Line Select",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "purchase_order_line",
   "fieldtype": "Link",
   "hidden": 0,
   "label": "Purchase Order Line",
   "max_length": 0,
   "max_value": 0,
   "options": "Purchase Order Item",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "",
   "fieldtype": "Page Break",
   "hidden": 0,
   "label": "",
   "max_length": 0,
   "max_value": 0,
   "options": "",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "supplier",
   "fieldtype": "Link",
   "hidden": 0,
   "label": "Supplier",
   "max_length": 0,
   "max_value": 0,
   "options": "Partner",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "inspector",
   "fieldtype": "Link",
   "hidden": 0,
   "label": "Inspector",
   "max_length": 0,
   "max_value": 0,
   "options": "User",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "inspection_date",
   "fieldtype": "Date",
   "hidden": 0,
   "label": "Inspection Date",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "order_number",
   "fieldtype": "Data",
   "hidden": 0,
   "label": "Order Number",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 1,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "line_number",
   "fieldtype": "Data",
   "hidden": 0,
   "label": "Line number",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 1,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "article_number",
   "fieldtype": "Data",
   "hidden": 0,
   "label": "Article Number",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 1,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "article_name",
   "fieldtype": "Data",
   "hidden": 0,
   "label": "Article Name",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 1,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "",
   "fieldtype": "Column Break",
   "hidden": 0,
   "label": "",
   "max_length": 0,
   "max_value": 0,
   "options": "",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "order_qty",
   "fieldtype": "Int",
   "hidden": 0,
   "label": "Order Qty",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 1,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "number_of_inspection",
   "fieldtype": "Int",
   "hidden": 0,
   "label": "Number of Inspection",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 1,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "inspected_qty",
   "fieldtype": "Int",
   "hidden": 0,
   "label": "Inspected Qty",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "failed_qty",
   "fieldtype": "Int",
   "hidden": 0,
   "label": "Failed Qty",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "aql_qty",
   "fieldtype": "Int",
   "hidden": 0,
   "label": "AQL Qty",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "default": "0",
   "fieldname": "full_inspection",
   "fieldtype": "Check",
   "hidden": 0,
   "label": "Full Inspection",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "",
   "fieldtype": "Page Break",
   "hidden": 0,
   "label": "",
   "max_length": 0,
   "max_value": 0,
   "options": "",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "template",
   "fieldtype": "Link",
   "hidden": 0,
   "label": "Template",
   "max_length": 0,
   "max_value": 0,
   "options": "Inspection Template",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "inspection_results",
   "fieldtype": "Table",
   "hidden": 0,
   "label": "Inspection results",
   "max_length": 0,
   "max_value": 0,
   "options": "Inspection Result",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "inspection_results_construction",
   "fieldtype": "Table",
   "hidden": 0,
   "label": "Inspection results (Construction)",
   "max_length": 0,
   "max_value": 0,
   "options": "Inspection Result",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "inspection_results_shade",
   "fieldtype": "Table",
   "hidden": 0,
   "label": "Inspection results (Shade)",
   "max_length": 0,
   "max_value": 0,
   "options": "Inspection Result",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "inspection_results_product",
   "fieldtype": "Table",
   "hidden": 0,
   "label": "Inspection results (Product)",
   "max_length": 0,
   "max_value": 0,
   "options": "Inspection Result",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "",
   "fieldtype": "Page Break",
   "hidden": 0,
   "label": "",
   "max_length": 0,
   "max_value": 0,
   "options": "",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "result",
   "fieldtype": "Select",
   "hidden": 0,
   "label": "Result",
   "max_length": 0,
   "max_value": 0,
   "options": "Pass\nFail\nN/A",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "default": "0",
   "fieldname": "need_reinspection",
   "fieldtype": "Check",
   "hidden": 0,
   "label": "Need reinspection",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "notes",
   "fieldtype": "Text",
   "hidden": 0,
   "label": "Notes",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  }
 ]
}