import csv
import os
import glob
import shutil
import frappe
from datetime import datetime
from frappe.desk.form.utils import add_comment
import logging
from io import StringIO
from contextlib import redirect_stdout

PO_DOCTYPE = "Purchase Order2"
PO_ITEM_DOCTYPE = "Purchase Order Item2"

# 設置日誌檔案路徑
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, filename='/home/frappe/frappe-bench/sites/sos.byrydens.com/logs/po_import.log', filemode='a', format='[%(asctime)s] %(levelname)s: %(message)s')

# 儲存 PO 和 PO 項目的資料結構
purchase_orders = {}

# 用於收集日誌訊息
log_buffer = StringIO()

# 讀取 CSV 檔案
def import_po_data(file_path):
    try:
        with open(file_path, mode='r', encoding='cp1252') as file:
            reader = csv.reader(file, delimiter='\t')
            
            current_po = None
            
            for row in reader:
                if not row:
                    continue
                
                row_type = row[0]
                
                # 處理 PO (01)
                if row_type == "01":
                    address_parts = [row[13], row[14], row[15]]  # 地址、郵政編碼、城市
                    address = ", ".join(part for part in address_parts if part)
                    po_data = {
                        "po_number": row[1],
                        "supplier_code": row[2],
                        "po_placed": row[3] if row[3] else None,
                        "payment_terms": row[6],
                        "delivery_terms": row[7],
                        "delivery_mode": row[8],
                        "requested_forwarder": row[12],
                        "delivery_address": address,
                        "purchaser": row[18],
                        "need_sample": row[19],
                        "responsible": row[20],
                        "purpose": row[21],
                        "directdelivery": row[22],
                        "items": []
                    }
                    current_po = po_data
                    purchase_orders[row[1]] = current_po
                
                # 處理 PO 項目 (02)
                elif row_type == "02" and current_po:
                    item_data = {
                        "line": row[2],
                        "article_number": row[3],
                        "requested_qty": int(row[4]) if row[4] else 0,
                        "article_name": row[6],
                        "supplier_art_number": row[7],
                        "supplier_selling_price": float(row[8]) if row[8] else 0,
                        "supplier_selling_price_unit": row[9],
                        "requested_finish_date": row[12] if row[12] else None,
                        "requested_eta": row[13] if row[13] else None,
                        "short_description": []
                    }
                    current_po["items"].append(item_data)
                
                # 處理短描述 (03)
                elif row_type == "03" and current_po and current_po["items"]:
                    current_po["items"][-1]["short_description"].append(row[3])
    
    except FileNotFoundError:
        msg = f"檔案未找到: {file_path}"
        logger.error(msg)
        print(msg)
    except Exception as e:
        msg = f"處理檔案時發生錯誤: {e}"
        logger.error(msg)
        print(msg)

# 檢查 Link 欄位是否存在
# def validate_link_field(doctype, fieldname, value):
#     if value and frappe.db.exists(doctype, value):
#         return value
#     else:
#         msg = f"{doctype} 中未找到 {fieldname}: {value}"
#         logger.warning(msg)
#         print(msg)
#         return None
def validate_link_field(doctype, fieldname, value):
    if not value:
        return None
    exists = frappe.db.exists(doctype, {fieldname: value})
    if exists:
        return exists
    else:
        msg = f"{doctype} 中未找到 {fieldname}: {value}"
        logger.warning(msg)
        print(msg)
        return None
# 檢查 po_number 是否存在
def check_po_exists(po_number):
    return frappe.db.exists(PO_DOCTYPE, {"po_number": po_number})

def get_poitem(po_numbre):
    try:
        poitems = frappe.get_doc(PO_ITEM_DOCTYPE, {"purchase_order": po_number})
        return poitems
    except frappe.DoesNotExistError:
        msg = f"採購訂單 {po_number} 不存在"
        logger.error(msg)
        print(msg)
        return []

# 創建或更新採購訂單
def create_purchase_order(po_data):
    # 檢查 po_number 是否存在
    po_exists = check_po_exists(po_data["po_number"])
    
    # 驗證 Link 欄位

    supplier_code = validate_link_field("Partner", "name", po_data["supplier_code"])
    purchaser = validate_link_field("User", "name_in_pyramid", po_data["purchaser"])
    responsible = validate_link_field("User", "name_in_pyramid", po_data["responsible"])
    order_type = "Standard" if po_data["need_sample"] == "N" else "Sample"
    delivery_terms = validate_link_field("Delivery Term", "name", po_data["delivery_terms"])
    payment_terms = validate_link_field("Payment Term", "code", po_data["payment_terms"])
    delivery_mode = "BY BOAT" if po_data["delivery_mode"] == "1" else "BY Air"
    if not supplier_code:
        msg = f"無效的 supplier_code: {po_data['supplier_code']}，無法創建或更新採購訂單"
        logger.error(msg)
        print(msg)
        return False, msg
    else:
        print(f"有效的 supplier_code: {supplier_code}")
        
    # 如果 PO 已存在，載入並更新；否則創建新 PO
    if po_exists:
        po = frappe.get_doc(PO_DOCTYPE, {"po_number": po_data["po_number"]})
        msg = f"採購訂單 {po_data['po_number']} 已存在，正在更新..."
        logger.info(msg)
        print(msg)
        action = "Updated"
    else:
        po = frappe.new_doc(PO_DOCTYPE)
        msg = f"創建新採購訂單: {po_data['po_number']}"
        logger.info(msg)
        print(msg)
        action = "Created"
    
    # 更新主表欄位
    po.po_number = po_data["po_number"]
    po.supplier = supplier_code
    po.purchaser = purchaser if purchaser else None
    po.po_placed = po_data["po_placed"]
    po.payment_terms = payment_terms if payment_terms else None
    po.delivery_mode = delivery_mode
    po.delivery_terms = delivery_terms if delivery_terms else None
    po.conversion_rate = 1.0  # 假設貨幣轉換率為 1
    po.delivery_address = po_data["delivery_address"]
    po.requested_forwarder = po_data["requested_forwarder"]
    po.responsible = responsible if responsible else None
    po.order_type = order_type
    po.purpose = po_data["purpose"]

    logger.warning("(176) Purchase Line Item")
    # 如果 PO 已存在，檢查現有 Purchase Line Item 的 line 欄位
    existing_items = {}
    if po_exists:
        for item in po.po_items:
            if item.line:
                existing_items[item.line] = item

    #處理 PO 項目（使用 Purchase Line Item doctype）
    po.set(PO_ITEM_DOCTYPE , [])  # 清空現有子表
    for item in po_data["items"]:
        article_number = validate_link_field("Product", "article_number", item["article_number"])
        if not article_number:
            msg = f"無效的 article_number: {item['article_number']}，跳過項目"
            logger.warning(msg)
            print(msg)
            continue
          logger.warning("(193) Purchase Line Item")
        # 檢查 line 是否存在
        if po_exists and item["line"] in existing_items:
            # 更新現有項目
            existing_item = existing_items[item["line"]]
            existing_item.article_number = article_number
            existing_item.requested_qty = item["requested_qty"]
            existing_item.supplier_selling_price = item["supplier_selling_price"]
            existing_item.supplier_selling_price_unit = item["supplier_selling_price_unit"]
            existing_item.article_name = item["article_name"]
            existing_item.short_description = "\n".join(item["short_description"])
            existing_item.requested_finish_date = item["requested_finish_date"]
            existing_item.requested_eta = item["requested_eta"]
            existing_item.line = item["line"]
            existing_item.supplier_art_number = item["supplier_art_number"]
            po.append("po_items", existing_item.as_dict())
        else:
            # 新增項目
            po.append(PO_ITEM_DOCTYPE, {
                "article_number": article_number
                "requested_qty": item["requested_qty"],
                "supplier_selling_price": item["supplier_selling_price"],
                "supplier_selling_price_unit": item["supplier_selling_price_unit"],
                "article_name": item["article_name"],
                "short_description": "\n".join(item["short_description"]),
                "requested_finish_date": item["requested_finish_date"],
                "requested_eta": item["requested_eta"],
                "line": item["line"],
                "supplier_art_number": item["supplier_art_number"]
            })
    
    try:
        po.save()
        # 記錄到 Activity Log
        comment = f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Import CSV file - {action}"
        add_activity_message(PO_DOCTYPE, po.name, comment, 'Info')
        frappe.db.commit()
        msg = f"已{action}採購訂單: {po.name}"
        logger.info(msg)
        print(msg)
        return True, msg
    except Exception as e:
        msg = f"{action}採購訂單 {po_data['po_number']} 失敗: {e}"
        logger.error(msg)
        print(msg)
        return False, msg

def add_activity_message(doctype_name, doc_name, message, comment_type='Info'):
    """
    Adds a message to the Activity log of a Frappe DocType.

    Args:
        doctype_name (str): The name of the DocType (e.g., 'Purchase Order').
        doc_name (str): The name of the specific document (e.g., 'PO-00001').
        message (str): The content of the message to add.
        comment_type (str, optional): The type of comment (e.g., 'Info', 'Comment'). Defaults to 'Info'.
    """
    try:
        doc = frappe.get_doc(doctype_name, doc_name)
        doc.add_comment(comment_type, message)
        frappe.db.commit()
        msg = f"已添加活動記錄到 {doctype_name} {doc_name}: {message}"
        logger.info(msg)
        print(msg)
        return True, msg
    except Exception as e:
        msg = f"添加活動記錄到 {doctype_name} {doc_name} 失敗: {e}"
        logger.error(msg)
        print(msg)
        return False, msg

# 發送電子郵件通知
def send_notification(subject, message, recipients=None):
    """
    Sends an email notification with the import results.

    Args:
        subject (str): Email subject (e.g., '[info] Purchase Order Import Result').
        message (str): Email content containing log messages.
        recipients (list): List of email addresses to send to (defaults to site admin).
    """
    try:
        if not recipients:
            # 預設發送給站點管理員
            recipients = [frappe.get_value("User", {"is_admin": 1}, "email")]
        frappe.sendmail(
            recipients=recipients,
            subject=subject,
            message=message,
            header=[subject, "green" if "[info]" in subject else "red"],
        )
        msg = f"已發送電子郵件通知: {subject}"
        logger.info(msg)
        print(msg)
    except Exception as e:
        msg = f"發送電子郵件通知失敗: {e}"
        logger.error(msg)
        print(msg)

# 可由 bench execute 呼叫的函數
def execute():
    logger.info("開始執行採購訂單匯入...")
    print("開始執行採購訂單匯入...")
    # 設置日誌捕獲
    global log_buffer
    log_buffer = StringIO()
    with redirect_stdout(log_buffer):
        error_occurred = False
        error_messages = []

        # 確保 proceed 目錄存在
        proceed_dir = "/home/ftpuser/done"
        if not os.path.exists(proceed_dir):
            os.makedirs(proceed_dir)
            msg = f"創建目錄: {proceed_dir}"
            logger.info(msg)
            print(msg)

        # 掃描所有 po*.txt 檔案
        input_dir = "/home/ftpuser/ftp"
        file_pattern = os.path.join(input_dir, "po*.txt")
        files = glob.glob(file_pattern)

        if not files:
            msg = f"在 {input_dir} 中未找到任何 po*.txt 檔案"
            logger.info(msg)
            print(msg)
            error_messages.append(msg)
            error_occurred = True
        else:
            for file_path in files:
                msg = f"正在處理檔案: {file_path}"
                logger.info(msg)
                print(msg)
                # 清空 purchase_orders 以處理新檔案
                purchase_orders.clear()
                # 匯入資料
                import_po_data(file_path)
                # 創建或更新採購訂單
                for po_number, po in purchase_orders.items():
                    success, msg = create_purchase_order(po)
                    if not success:
                        error_occurred = True
                        error_messages.append(msg)
                # 移動檔案到 proceed 目錄
                # try:
                #     dest_path = os.path.join(proceed_dir, os.path.basename(file_path))
                #     shutil.move(file_path, dest_path)
                #     msg = f"檔案已移動到: {dest_path}"
                #     logger.info(msg)
                #     print(msg)
                # except Exception as e:
                #     error_occurred = True
                #     msg = f"移動檔案 {file_path} 失敗: {e}"
                #     logger.error(msg)
                #     print(msg)
                #     error_messages.append(msg)

        # 獲取所有日誌訊息
        log_output = log_buffer.getvalue()

        # 發送電子郵件通知
        if error_occurred:
            subject = f"[error] Purchase Order Import Failure - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            message = f"採購訂單匯入失敗，錯誤訊息如下:\n\n{log_output}\n\n詳細錯誤:\n" + "\n".join(error_messages)
        else:
            subject = f"[info] Purchase Order Import Result - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            message = f"採購訂單匯入成功，日誌如下:\n\n{log_output}"
        
        # send_notification(subject, message)